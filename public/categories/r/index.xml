<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Ernest Omane-Kodie</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Ernest Omane-Kodie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 23 Mar 2019 21:13:14 -0500</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Programming helpers from purrr and friends, part 3</title>
      <link>/blog/functional-programming-helpers-from-purrr-and-friends-part-3/</link>
      <pubDate>Sat, 23 Mar 2019 21:13:14 -0500</pubDate>
      
      <guid>/blog/functional-programming-helpers-from-purrr-and-friends-part-3/</guid>
      <description>via GIPHYBackgroundIn the first and second instalments of this blog series, we touched on some functional programming concepts and their implementation in purrr and related packages. This instalment continues the exploration, showing techniques for writing functions which are capable of creating new functions: function factories, partial application and quasiquotation.
Let’s begin by loading the packages we need.
library(purrr)library(rlang)library(fs)library(magrittr)library(vroom)library(readr)Motivating exampleWe will illustrate new concepts by adapting the simple file reading problem from the previous instalment.</description>
    </item>
    
    <item>
      <title>Functional Programming helpers from purrr and friends, part 2 | Composition</title>
      <link>/blog/functional-programming-helpers-from-purrr-and-friends-part-2-composition/</link>
      <pubDate>Wed, 02 Jan 2019 21:13:14 -0500</pubDate>
      
      <guid>/blog/functional-programming-helpers-from-purrr-and-friends-part-2-composition/</guid>
      <description>via GIPHYBackgroundIn the first instalment of this blog series, I explored how some functional programming (FP) concepts are implemented in R using purrr and associated packages. This post extends the exploration to cover two closely related concepts: composition and pointfree style.
Note that the main focus of the blog series is FP concepts that feel natural to R and are in line with the design philosophy of purrr:</description>
    </item>
    
    <item>
      <title>Functional Programming helpers from purrr and friends, part 1 | Rowwise operations</title>
      <link>/blog/functional-programming-helpers-from-purrr-and-friends-part-1-rowwise-operations/</link>
      <pubDate>Tue, 18 Dec 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/functional-programming-helpers-from-purrr-and-friends-part-1-rowwise-operations/</guid>
      <description>via GIPHYMotivationThis series of blog posts is inspired by David Robinson’s tweet:
When you’ve given the same in-person advice 3 times, write a blog post.
In each instalment in the series, I will walk through simple scenarios to illustrate how functional programming tools from purrr and related packages can bring quality of life improvements to tidyverse workflows.
library(tidyverse)library(magrittr)library(kableExtra)pretty_print &amp;lt;- function(df){result &amp;lt;- df %&amp;gt;% kable() %&amp;gt;% kable_styling(font_size = 14) %&amp;gt;% row_spec(0, bold = T, font_size = 14)return(result)}Rowwise operations on all columns in a dataframeBackgroundWe will use a small subset of the planes dataset to illustrate this example.</description>
    </item>
    
    <item>
      <title>Drinking from the Firehose: using R to keep up with current ML Research - part 1</title>
      <link>/blog/drinking-from-the-firehose-using-r-to-keep-up-with-current-ml-research-part-1/</link>
      <pubDate>Tue, 12 Jun 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/drinking-from-the-firehose-using-r-to-keep-up-with-current-ml-research-part-1/</guid>
      <description>via GIPHYIn this post, I will explore how we can use resources available in the R package ecosystem to keep up with state-of-the-art machine learning research.
MotivationRecently, I have been reading books about creativity. The recurring concept in the books is that the key place to start when mastering a skill is by reproducing other people’s proven ideas and figuring out their inner workings - a form of apprenticeship.</description>
    </item>
    
    <item>
      <title>Colours &amp; Impact: Resources for Data Visualization with a splash of R</title>
      <link>/blog/colours-impact-resources-for-data-visualization-with-a-splash-of-r/</link>
      <pubDate>Mon, 11 Jun 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/colours-impact-resources-for-data-visualization-with-a-splash-of-r/</guid>
      <description>via GIPHYA curated list of awesome data visualization resources with a splash of R. Inspired by Awesome R.
Arranged in no particular order.
Colour theory &amp;amp; chart designSubtleties of Color- Robert Simmon (2013)Make grey your best friend - Andy Kirk (2015)Viz Palette for Data Visualization Color - Elijah Meeks (2018)How to Optimize Charts For Color Blind Readers - Tom Jager (2017)The Do’s And Don’ts of Infographic Color Selection - Ryan McCready (2016)10 Do’s and Don’ts of Infographic Chart Design - Midori Nediger (2018)5 Data Visualization Tips to Guide Your Design Process - Jan Willem Tulp (2017)What to consider when choosing colors for data visualization - Lisa Charlotte Rost (2018)The Power of The Palette: Why Color is Key in Data Visualization and How to Use It - Alan Wilson (2017)Web toolscolororacle - Colour-blindness simulatorCanva Color Palette Generator - creates a palette based on the five main colours of any uploaded imageMaterial palette - converts any two colours into a full colour palette</description>
    </item>
    
    <item>
      <title>Need for Speed: Benchmarks on Dataframes</title>
      <link>/blog/need-for-speed-benchmarks-on-dataframes/</link>
      <pubDate>Mon, 30 Apr 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/need-for-speed-benchmarks-on-dataframes/</guid>
      <description>via GIPHYIn this post, I will explore the execution speed of various implementations of dataframe aggregation and combining operations in R.
I will record timings using microbenchmark, a package for measuring the performance of very small pieces of R code.</description>
    </item>
    
    <item>
      <title>Installing Missing Packages from Bioconductor, CRAN and Github</title>
      <link>/blog/installing-missing-packages-from-bioconductor-cran-and-github/</link>
      <pubDate>Fri, 13 Apr 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/installing-missing-packages-from-bioconductor-cran-and-github/</guid>
      <description>via GIPHYOver the past few days I have had to use computers that are different from my trusty old laptop. One thing I noticed while working with R on the new machines is that the excitement in checking for, and installing, missing packages wears off pretty quickly. This blog post is a walk-through of a function I wrote to make the process less painful.
A bit more backgroundWhen R developers create open source packages, they typically distribute them through The Comprehensive R Archive Network (CRAN), Github or, if the package concerns computational biology and/or bioinformatics, Bioconductor.</description>
    </item>
    
  </channel>
</rss>